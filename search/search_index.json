{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-payments-flow","text":"<p><code>django-payments-flow</code> es una variante de Django Payments que implementa la creaci\u00f3n, confirmaci\u00f3n y expiraci\u00f3n de pagos realizados a trav\u00e9s de Flow. Este m\u00f3dulo proporciona integraci\u00f3n con la API de Flow para facilitar el procesamiento y gesti\u00f3n de pagos en tu aplicaci\u00f3n web Django.</p>"},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p><code>django-payments-flow</code> est\u00e1 dise\u00f1ado para simplificar la integraci\u00f3n de pagos de Flow en tu proyecto Django Payments. Con este m\u00f3dulo, puedes crear y gestionar pagos utilizando la pasarela de pago de Flow de manera sencilla.</p> <p>Caracter\u00edsticas principales:</p> <ul> <li>Crea y procesa pagos de forma segura con Flow.</li> <li>Recibe notificaciones de confirmaci\u00f3n de pago.</li> <li>Maneja autom\u00e1ticamente la expiraci\u00f3n y cancelaci\u00f3n de pagos.</li> </ul>"},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>Puedes instalar django-payments-flow con:</p> usando pipusando poetry <pre><code>pip install django-payments-flow\n</code></pre> <pre><code>poetry add django-payments-flow\n</code></pre>"},{"location":"#configuracion","title":"Configuraci\u00f3n","text":"<p>La configuracion se realiza como una variante de Django Payments</p> <pre><code>PAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_flow.FlowProvider\", {\n        \"api_key\": \"flow_key\",\n        \"api_secret\": \"flow_secret\",\n    })\n}\n</code></pre> <p>Por defecto las llamadas se realizan al ambiente de produccion de Flow, si quieres realizar llamadas al ambiente sandbox debes agregar <code>\"endpoint\": \"sandbox\"</code> a la configuracion</p> <pre><code>PAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_flow.FlowProvider\", {\n        \"api_key\": \"flow_key\",\n        \"api_secret\": \"flow_secret\",\n        \"api_endpoint\": \"sandbox\"\n    })\n}\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Cambios notables de Django Payments Flow</p> <p>Formato basado en Keep a Changelog, y este proyecto se adhiere a Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#2024923-2024-09-23","title":"[2024.9.23] - 2024-09-23","text":""},{"location":"CHANGELOG/#cambiado","title":"Cambiado","text":"<ul> <li>Cambios en documentacion.</li> </ul>"},{"location":"CHANGELOG/#014-2023-07-20","title":"[0.1.4] - 2023-07-20","text":""},{"location":"CHANGELOG/#agregado","title":"Agregado","text":"<ul> <li>Creacion de reembolso</li> </ul>"},{"location":"CHANGELOG/#cambiado_1","title":"Cambiado","text":"<ul> <li>Rollback de soporte openapi3</li> </ul>"},{"location":"CHANGELOG/#013-2023-07-20","title":"[0.1.3] - 2023-07-20","text":""},{"location":"CHANGELOG/#agregado_1","title":"Agregado","text":"<ul> <li>Creacion de pago</li> <li>Correccion Tests</li> </ul>"},{"location":"CHANGELOG/#012-2023-07-12","title":"[0.1.2] - 2023-07-12","text":""},{"location":"CHANGELOG/#agregado_2","title":"Agregado","text":"<ul> <li>Algunos tests</li> <li>Trabajo con pyFlowCL</li> </ul>"},{"location":"CHANGELOG/#011-2023-07-05","title":"[0.1.1] - 2023-07-05","text":""},{"location":"CHANGELOG/#agregado_3","title":"Agregado","text":"<ul> <li>Estructura base</li> </ul>"},{"location":"api/","title":"API","text":"<p>               Bases: <code>BasicProvider</code></p> <p>FlowProvider es una clase que proporciona integraci\u00f3n con Flow para procesar pagos. Inicializa una instancia de FlowProvider con el key y el secreto de Flow.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>ApiKey entregada por Flow.</p> required <code>api_secret</code> <code>str</code> <p>ApiSecret entregada por Flow.</p> required <code>api_medio</code> <code>int | None</code> <p>Versi\u00f3n de la API de notificaciones a utilizar (Valor por defecto: 9).</p> <code>9</code> <code>api_endpoint</code> <code>str</code> <p>Ambiente flow, puede ser \"live\" o \"sandbox\" (Valor por defecto: live).</p> required <code>**kwargs</code> <code>int</code> <p>Argumentos adicionales.</p> <code>{}</code> Source code in <code>django_payments_flow/provider.py</code> <pre><code>class FlowProvider(BasicProvider):\n    \"\"\"\n    FlowProvider es una clase que proporciona integraci\u00f3n con Flow para procesar pagos.\n    Inicializa una instancia de FlowProvider con el key y el secreto de Flow.\n\n    Args:\n        api_key (str): ApiKey entregada por Flow.\n        api_secret (str): ApiSecret entregada por Flow.\n        api_medio (int | None): Versi\u00f3n de la API de notificaciones a utilizar (Valor por defecto: 9).\n        api_endpoint (str): Ambiente flow, puede ser \"live\" o \"sandbox\" (Valor por defecto: live).\n        **kwargs: Argumentos adicionales.\n    \"\"\"\n\n    form_class = BasePaymentForm\n    api_endpoint: str\n    api_key: str = None\n    api_secret: str = None\n    api_medio: int\n    _client: Any = None\n\n    def __init__(\n        self,\n        api_endpoint: str,\n        api_key: str,\n        api_secret: str,\n        api_medio: int = 9,\n        **kwargs: int,\n    ):\n        super().__init__(**kwargs)\n        self.api_endpoint = api_endpoint\n        self.api_key = api_key\n        self.api_secret = api_secret\n        self.api_medio = api_medio\n        if self.api_endpoint == \"live\":\n            self.api_endpoint = \"https://www.flow.cl/api\"\n        elif self.api_endpoint == \"sandbox\":\n            self.api_endpoint = \"https://sandbox.flow.cl/api\"\n        self._client = ApiClient(self.api_endpoint, self.api_key, self.api_secret)\n\n    def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n        \"\"\"\n        Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            data (dict | None): Datos del formulario (opcional).\n\n        Returns:\n            Any: Formulario de pago redirigido a la p\u00e1gina de pago de Flow.\n\n        Raises:\n            RedirectNeeded: Redirige a la p\u00e1gina de pago de Flow.\n\n        \"\"\"\n        if not payment.transaction_id:\n            datos_para_flow = {\n                \"apiKey\": self.api_key,\n                \"commerceOrder\": payment.token,\n                \"urlReturn\": payment.get_success_url(),\n                \"urlConfirmation\": f\"{get_base_url()}{payment.get_process_url()}\",\n                \"subject\": payment.description,\n                \"amount\": int(payment.total),\n                \"paymentMethod\": self.api_medio,\n                \"currency\": payment.currency,\n            }\n\n            if payment.billing_email:\n                datos_para_flow.update({\"email\": payment.billing_email})\n\n            datos_para_flow.update(**self._extra_data(payment.attrs))\n\n            try:\n                payment.attrs.datos_payment_create_flow = datos_para_flow\n                payment.save()\n            except Exception as e:\n                raise PaymentError(f\"Ocurri\u00f3 un error al guardar attrs.datos_flow: {e}\")\n\n            try:\n                pago = FlowPayment.create(self._client, datos_para_flow)\n\n            except Exception as pe:\n                payment.change_status(PaymentStatus.ERROR, str(pe))\n                raise PaymentError(pe)\n            else:\n                payment.transaction_id = pago.token\n                payment.attrs.respuesta_flow = {\n                    \"url\": pago.url,\n                    \"token\": pago.token,\n                    \"flowOrder\": pago.flowOrder,\n                }\n                payment.save()\n                payment.change_status(PaymentStatus.WAITING)\n\n            raise RedirectNeeded(f\"{pago.url}?token={pago.token}\")\n\n    def process_data(self, payment, request) -&gt; JsonResponse:\n        \"\"\"\n        Procesa los datos del pago recibidos desde Flow.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n        Returns:\n            JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n        \"\"\"\n        if \"token\" not in request.POST:\n            raise HttpResponseBadRequest(\"token no est\u00e1 en post\")\n\n        data = {\"status\": \"ok\"}\n        if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n            self.actualiza_estado(payment=payment)\n\n        return JsonResponse(data)\n\n    def actualiza_estado(self, payment) -&gt; dict:\n        \"\"\"Actualiza el estado del pago con Flow\n\n        Args:\n            payment (\"Payment): Objeto de pago Django Payments.\n\n        Returns:\n            dict: Diccionario con valores del objeto `PaymentStatus`.\n        \"\"\"\n        try:\n            status = FlowPayment.getStatus(self._client, payment.transaction_id)\n        except Exception as e:\n            raise e\n        else:\n            if status.status == 2:\n                payment.change_status(PaymentStatus.CONFIRMED)\n            elif status.status == 3:\n                payment.change_status(PaymentStatus.REJECTED)\n            elif status.status == 4:\n                payment.change_status(PaymentStatus.ERROR)\n        return asdict(status)\n\n    def _extra_data(self, attrs) -&gt; dict:\n        \"\"\"Busca los datos que son enviandos por django-payments y los saca del diccionario\n\n        Args:\n            attrs (\"PaymentAttributeProxy\"): Obtenido desde PaymentModel.extra_data\n\n        Returns:\n            dict: Diccionario con valores permitidos.\n        \"\"\"\n        try:\n            data = attrs.datos_extra\n        except AttributeError:\n            return {}\n\n        prohibidos = [\n            \"commerceOrder\",\n            \"urlReturn\",\n            \"urlConfirmation\",\n            \"amount\",\n            \"subject\",\n            \"paymentMethod\",\n            \"currency\",\n        ]\n        for valor in prohibidos:\n            if valor in data:\n                del data[valor]\n\n        return data\n\n    def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n        \"\"\"\n        Realiza un reembolso del pago.\n        El seguimiendo se debe hacer directamente en Flow\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            amount (int | None): Monto a reembolsar (opcional).\n\n        Returns:\n            int: Monto de reembolso solicitado.\n\n        Raises:\n            PaymentError: Error al crear el reembolso.\n\n        \"\"\"\n        if payment.status != PaymentStatus.CONFIRMED:\n            raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n        to_refund = amount or payment.total\n        try:\n            datos_reembolso = {\n                \"apiKey\": self.api_key,\n                \"refundCommerceOrder\": payment.token,\n                \"receiverEmail\": payment.billing_email,\n                \"amount\": to_refund,\n                \"urlCallBack\": f\"{get_base_url()}{payment.get_process_url()}\",\n                \"commerceTrxId\": payment.token,\n                \"flowTrxId\": payment.attrs.respuesta_flow[\"flowOrder\"],\n            }\n            refund = FlowRefund.create(self._client, datos_reembolso)\n        except Exception as pe:\n            raise PaymentError(pe)\n        else:\n            payment.attrs.solicitud_reembolso = refund\n            payment.save()\n            payment.change_status(PaymentStatus.REFUNDED)\n            return to_refund\n\n    def capture(self):\n        \"\"\"\n        Captura el pago (no implementado).\n\n        Note:\n            M\u00e9todo no soportado por Flow.\n        Raises:\n            NotImplementedError: M\u00e9todo no implementado.\n        \"\"\"\n        raise NotImplementedError()\n\n    def release(self):\n        \"\"\"\n        Libera el pago (no implementado).\n\n        Note:\n            M\u00e9todo no soportado por Flow.\n\n        Raises:\n            NotImplementedError: M\u00e9todo no implementado.\n\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.actualiza_estado","title":"<code>actualiza_estado(payment)</code>","text":"<p>Actualiza el estado del pago con Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>\"Payment</code> <p>Objeto de pago Django Payments.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Diccionario con valores del objeto <code>PaymentStatus</code>.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def actualiza_estado(self, payment) -&gt; dict:\n    \"\"\"Actualiza el estado del pago con Flow\n\n    Args:\n        payment (\"Payment): Objeto de pago Django Payments.\n\n    Returns:\n        dict: Diccionario con valores del objeto `PaymentStatus`.\n    \"\"\"\n    try:\n        status = FlowPayment.getStatus(self._client, payment.transaction_id)\n    except Exception as e:\n        raise e\n    else:\n        if status.status == 2:\n            payment.change_status(PaymentStatus.CONFIRMED)\n        elif status.status == 3:\n            payment.change_status(PaymentStatus.REJECTED)\n        elif status.status == 4:\n            payment.change_status(PaymentStatus.ERROR)\n    return asdict(status)\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.capture","title":"<code>capture()</code>","text":"<p>Captura el pago (no implementado).</p> Note <p>M\u00e9todo no soportado por Flow.</p> <p>Raises:     NotImplementedError: M\u00e9todo no implementado.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def capture(self):\n    \"\"\"\n    Captura el pago (no implementado).\n\n    Note:\n        M\u00e9todo no soportado por Flow.\n    Raises:\n        NotImplementedError: M\u00e9todo no implementado.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.get_form","title":"<code>get_form(payment, data=None)</code>","text":"<p>Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>data</code> <code>dict | None</code> <p>Datos del formulario (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Formulario de pago redirigido a la p\u00e1gina de pago de Flow.</p> <p>Raises:</p> Type Description <code>RedirectNeeded</code> <p>Redirige a la p\u00e1gina de pago de Flow.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n    \"\"\"\n    Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        data (dict | None): Datos del formulario (opcional).\n\n    Returns:\n        Any: Formulario de pago redirigido a la p\u00e1gina de pago de Flow.\n\n    Raises:\n        RedirectNeeded: Redirige a la p\u00e1gina de pago de Flow.\n\n    \"\"\"\n    if not payment.transaction_id:\n        datos_para_flow = {\n            \"apiKey\": self.api_key,\n            \"commerceOrder\": payment.token,\n            \"urlReturn\": payment.get_success_url(),\n            \"urlConfirmation\": f\"{get_base_url()}{payment.get_process_url()}\",\n            \"subject\": payment.description,\n            \"amount\": int(payment.total),\n            \"paymentMethod\": self.api_medio,\n            \"currency\": payment.currency,\n        }\n\n        if payment.billing_email:\n            datos_para_flow.update({\"email\": payment.billing_email})\n\n        datos_para_flow.update(**self._extra_data(payment.attrs))\n\n        try:\n            payment.attrs.datos_payment_create_flow = datos_para_flow\n            payment.save()\n        except Exception as e:\n            raise PaymentError(f\"Ocurri\u00f3 un error al guardar attrs.datos_flow: {e}\")\n\n        try:\n            pago = FlowPayment.create(self._client, datos_para_flow)\n\n        except Exception as pe:\n            payment.change_status(PaymentStatus.ERROR, str(pe))\n            raise PaymentError(pe)\n        else:\n            payment.transaction_id = pago.token\n            payment.attrs.respuesta_flow = {\n                \"url\": pago.url,\n                \"token\": pago.token,\n                \"flowOrder\": pago.flowOrder,\n            }\n            payment.save()\n            payment.change_status(PaymentStatus.WAITING)\n\n        raise RedirectNeeded(f\"{pago.url}?token={pago.token}\")\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.process_data","title":"<code>process_data(payment, request)</code>","text":"<p>Procesa los datos del pago recibidos desde Flow.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>request</code> <code>HttpRequest</code> <p>Objeto de solicitud HTTP de Django.</p> required <p>Returns:</p> Name Type Description <code>JsonResponse</code> <code>JsonResponse</code> <p>Respuesta JSON que indica el procesamiento de los datos del pago.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def process_data(self, payment, request) -&gt; JsonResponse:\n    \"\"\"\n    Procesa los datos del pago recibidos desde Flow.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n    Returns:\n        JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n    \"\"\"\n    if \"token\" not in request.POST:\n        raise HttpResponseBadRequest(\"token no est\u00e1 en post\")\n\n    data = {\"status\": \"ok\"}\n    if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n        self.actualiza_estado(payment=payment)\n\n    return JsonResponse(data)\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.refund","title":"<code>refund(payment, amount=None)</code>","text":"<p>Realiza un reembolso del pago. El seguimiendo se debe hacer directamente en Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>amount</code> <code>int | None</code> <p>Monto a reembolsar (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Monto de reembolso solicitado.</p> <p>Raises:</p> Type Description <code>PaymentError</code> <p>Error al crear el reembolso.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n    \"\"\"\n    Realiza un reembolso del pago.\n    El seguimiendo se debe hacer directamente en Flow\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        amount (int | None): Monto a reembolsar (opcional).\n\n    Returns:\n        int: Monto de reembolso solicitado.\n\n    Raises:\n        PaymentError: Error al crear el reembolso.\n\n    \"\"\"\n    if payment.status != PaymentStatus.CONFIRMED:\n        raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n    to_refund = amount or payment.total\n    try:\n        datos_reembolso = {\n            \"apiKey\": self.api_key,\n            \"refundCommerceOrder\": payment.token,\n            \"receiverEmail\": payment.billing_email,\n            \"amount\": to_refund,\n            \"urlCallBack\": f\"{get_base_url()}{payment.get_process_url()}\",\n            \"commerceTrxId\": payment.token,\n            \"flowTrxId\": payment.attrs.respuesta_flow[\"flowOrder\"],\n        }\n        refund = FlowRefund.create(self._client, datos_reembolso)\n    except Exception as pe:\n        raise PaymentError(pe)\n    else:\n        payment.attrs.solicitud_reembolso = refund\n        payment.save()\n        payment.change_status(PaymentStatus.REFUNDED)\n        return to_refund\n</code></pre>"},{"location":"api/#django_payments_flow.provider.FlowProvider.release","title":"<code>release()</code>","text":"<p>Libera el pago (no implementado).</p> Note <p>M\u00e9todo no soportado por Flow.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>M\u00e9todo no implementado.</p> Source code in <code>django_payments_flow/provider.py</code> <pre><code>def release(self):\n    \"\"\"\n    Libera el pago (no implementado).\n\n    Note:\n        M\u00e9todo no soportado por Flow.\n\n    Raises:\n        NotImplementedError: M\u00e9todo no implementado.\n\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"uso/","title":"Como Usar","text":""},{"location":"uso/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para utilizar el m\u00f3dulo <code>django-payments-flow</code>, puedes realizar la instalaci\u00f3n mediante el uso de pip o poetry.</p> usando pipusando poetry <pre><code>pip install django-payments-flow\n</code></pre> <pre><code>poetry add django-payments-flow\n</code></pre>"},{"location":"uso/#configuracion","title":"Configuraci\u00f3n","text":"<p>La configuraci\u00f3n del m\u00f3dulo django-payments-flow se realiza como una variante de Django Payments. Debes agregar la siguiente configuraci\u00f3n en tu archivo de configuraci\u00f3n de Django:</p> <pre><code>PAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_flow.FlowProvider\", {\n        \"api_key\": \"flow_key\",\n        \"api_secret\": \"flow_secret\",\n    })\n}\n</code></pre> <p>Por defecto las llamadas se realizan al ambiente de produccion de Flow, si quieres realizar llamadas al ambiente sandbox debes agregar <code>\"endpoint\": \"sandbox\"</code> a la configuracion</p> <pre><code>PAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_flow.FlowProvider\", {\n        \"api_key\": \"flow_key\",\n        \"api_secret\": \"flow_secret\",\n        \"api_endpoint\": \"sandbox\"\n    })\n}\n</code></pre>"},{"location":"uso/#variables-de-configuracion","title":"Variables de configuraci\u00f3n","text":"<ul> <li><code>api_endpoint</code>: Valor de ambiente de Flow, puede ser \"live o \"sandbox\" (Valor por  defecto: live)</li> <li><code>api_key</code>: Este valor corresponde a la cuenta entregada por Flow para identificar al receptor de los pagos.</li> <li><code>api_secret</code>: Este valor corresponde a la contrase\u00f1a entregada por Khipu para autenticar la comunicaci\u00f3n con su plataforma.</li> <li><code>api_medio</code>: Este valor indica si quieres utilizar algun medio de pago especifico segun lo indicado en FlowAPI (Valor por defecto: 9)</li> </ul>"},{"location":"uso/#datos-extra","title":"Datos Extra","text":"<p>El m\u00f3dulo <code>django-payments-flow</code> permite enviar datos extra en cada pago. Para hacerlo, debes utilizar un objeto JSON dentro de la propiedad \"attrs\" del modelo de Pagos.</p> <p>Por ejemplo, si deseas enviar un limite de 5 minutos para cada compra, puedes utilizar el siguiente c\u00f3digo:</p> <pre><code>datos_extra: dict = {\n    \"timeout\": 300,\n}\npayment.attrs.datos_extra = datos_extra\npayment.save()\n</code></pre> <p>Puedes proporcionar un diccionario unidimensional con los valores extra que deseas enviar en cada pago.</p> <p>Cabe destacar que los valores <code>apiKey</code>, <code>commerceOrder</code>, <code>subject</code>, <code>amount</code>, <code>email</code>, <code>urlConfirmation</code>, <code>urlReturn</code>, <code>s</code> no pueden ser utilizados como datos extra y ser\u00e1n ignorados al momento de crear el pago.</p>"}]}